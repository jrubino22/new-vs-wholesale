{% style %}
  form {
    margin-bottom: 5px !important;
  }
  .product__form__outer {
    margin-bottom: 0px !important;
  }
{% endstyle %}

{% assign current_variant = product.selected_or_first_available_variant %}


{% if block.settings.info_page != blank %}
  {%- capture size_translation -%}{{ 'general.size_chart.size' | t }}{%- endcapture -%}
  {%- liquid
    assign size_chart_index = -1
    assign size_translation = size_translation | lstrip | rstrip | downcase
    for option in product.options
      assign option_san = option | lstrip | rstrip | downcase
      if option_san contains size_translation
        assign size_chart_index = forloop.index0
      endif
    endfor
    assign size_page = pages[block.settings.info_page] 

    assign action_style = 'product__info__link--inline'
    if size_chart_index == -1
      assign action_style = 'product__info__link'
    endif
  -%}
{% endif %}
{% capture size_chart %}
  {% if block.settings.info_page != blank %}
    <a href="{{ size_page.url }}" class="{{ action_style }}" data-popup-{{ block.id }}="size-{{ block.id }}">
      {{ size_page.title }}
    </a>
    <div class="modal micromodal-slide" id="size-{{ block.id }}" data-modal aria-hidden="true">
      <div class="modal__overlay" tabindex="-1" data-micromodal-close>
        <button data-micromodal-close class="modal__close" aria-label="{{ 'general.accessibility.close' | t }}"></button>
        <div class="modal__container modal__container--inline"
          data-modal-content
          role="dialog"
          aria-modal="true"
          aria-label="{{ size_page.title }}">
          <div class="rte">{{ size_page.content }}</div>
        </div>
      </div>
    </div>
  {% endif %}
{% endcapture %}

  

<div class="product__form__outer {{ buybutton_class }}">

  
  {% form 'product', product, data-product-form: '', data-product-handle: product.handle, class: 'gc-form'  %}


  
    {% comment %} The input with name="id" submits to cart {% endcomment %} 
    <input class="mainProdId" type="hidden" name="id" value="{{ current_variant.id }}">

    {% comment %} Shop pay split payment terms {% endcomment %} 
    <div class="shop-pay-terms">
      {{ form | payment_terms }}
    </div>

    {% unless product.has_only_default_variant %}
      <div class="form__selectors">
        {% for option in product.options_with_values %}
          {%- if settings.swatches_enable -%}
            {% comment %} Determine if current option matches swatch handle translations {% endcomment %}
            {%- capture swatch_translation -%}{{ 'general.swatches.color' | t }} {%- endcapture -%}
            {%- assign translation_array = swatch_translation | append:',' | split: "," | uniq -%}
            {%- assign is_swatch_option = false -%}
            {%- assign option_handle = option.name | downcase | lstrip | rstrip | escape_once -%}
            {%- for translation in translation_array -%}
              {%- assign translation_handle = translation | downcase | lstrip | rstrip | escape_once -%}
              {%- if translation_handle == option_handle -%}
                {%- assign is_swatch_option = true -%}
                {% break %}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          <div class="selector-wrapper js" data-split-select-wrapper data-select-label="{{ option.name }}"  data-option-position="{{ option.position }}">
            {%- if block.settings.variant_form == "button" or is_swatch_option -%}
              {% assign current_value = current_variant.options[forloop.index0] %}
              <fieldset class="radio__fieldset">
                <legend class="radio__legend">
                  <span class="radio__legend__label">{{ option.name | escape_once }}</span>
                  <span data-option-value>{{ current_value }}</span>
                  {%- if size_chart_index == forloop.index0 -%}
                    {{ size_chart }}
                  {%- endif -%}
                </legend>

              

                {% for value in option.values %}
                  {% capture input_id %}{{ product.id }}-{{ block.id }}-{{ option.name | escape_once }}-{{ value | escape_once }}{% endcapture %}

                  {%- if is_swatch_option -%}
                    <span class="swatch__button" data-tooltip="{{ value | escape_once }}">
                      <input type="radio"
                          name="options[{{ option.name | escape_once }}]"
                          value="{{ value | escape_once }}" 
                          id="{{ input_id }}"
                          {%- if value == current_value -%}checked{%- endif -%}>
                      <label for="{{ input_id }}" data-swatch="{{ value | escape_once }}">
                        <span class="visually-hidden">{{ value | escape_once }}</span>
                      </label>
                    </span>

                  {%- else -%}
                    {% comment %} radio button {% endcomment %}
                    <span class="radio__button">
                      <input
                        type="radio"
                        name="options[{{ option.name | escape_once }}]"
                        value="{{ value | escape_once }}" id="{{ input_id }}"
                        {%- if value == current_value -%}checked{%- endif -%}>
                      <label for="{{ input_id }}">
                        <span>{{ value | escape_once }}</span>
                      </label>
                    </span>
                  {%- endif -%}

                {% endfor %}
              </fieldset>
            {%- else -%}
              <fieldset class="select__fieldset">
                {% capture input_id %}{{product.id}}-option-{{ option.position }}{% endcapture %}
                <label class="select__label" for="{{ input_id }}">
                  {{ option.name }}
                </label>
                <select class="product__form__select"
                  id="{{ input_id }}"
                  name="options[{{ option.name | escape_once }}]">
                  {% for value in option.values %}
                    <option
                      value="{{ value | escape_once }}"
                      {% if option.selected_value == value %} selected="selected"{% endif %}>
                      {{ value | escape_once }}
                    </option>
                  {% endfor %}
                </select>
              </fieldset>
            {%- endif -%}
          </div>
        {% endfor %}
      </div>
    {% endunless %}

    <noscript>
      <select name="id" class="no-js" data-product-select aria-label="{{ product.options_with_values | map: 'name' | uniq | join: ', ' }}">
        {% for variant in product.variants %}
          <option
            {% if variant == current_variant %}selected="selected"{% endif %}
            {% unless variant.available %}disabled="disabled"{% endunless %}
            value="{{ variant.id }}">
              {{ variant.title }}
          </option>
        {% endfor %}
      </select>
    </noscript>
   
    <p class="line-item-property\_\_field"> <label for="custom\_photo">Include artwork here (JPG or PNG)</label> 
      <input required class="required gc_img_upload" id="custom\_photo" type="file" name="properties[Photo]"/> 
    </p>
                                                                                                            
    {%- if product.selling_plan_groups.size > 0 -%}
      {% if block.settings.subscriptions_enable_selectors %}
        {% render 'subscription-form', product: product %}
      {%- endif -%}
      {% comment %} Delete the following line to block the theme from updating subscription prices {% endcomment %} 
      <span data-subscription-watch-price></span>
    {%- endif -%}

    {% if block.settings.show_quantity %}
      
      <div class="quantity__wrapper" data-quantity-selector style="display: inline-block; min-width: 120px">
        <span style="font-size:.9rem; font-weight:1.5rem;">QTY:</span>
        <input data-quantity-input
          aria-label="{{ 'cart.label.quantity' | t }}"
          class="quantity__input custom__qi change_price_func"
          type="number"
          min="{{ product.metafields.custom.plquant1 }}"
          max="10000000"
          size="8"
          pattern="[0-9]*"
          name="quantity"
          value="{{ product.metafields.custom.plquant1 }}"/>
      </div>
      <div class="price_per_unit" style="display: inline-block;">
        <span id="ppu_span">{{ current_variant.price | money }}</span>
        <span> Per Unit</span>
      
      </div>
    {% endif %}


    {%- if block.settings.show_remaining or size_chart_index == -1 -%}
    

        {%- if size_chart_index == -1 -%}
          {{ size_chart }}
        {%- endif -%}

        {%- if block.settings.show_remaining -%}
          {%- assign max_inventory = 10 -%}
          {%- assign show_remaining_class = '' -%}
          {%- assign current_inventory = 0 -%}

          {%- if current_variant.inventory_policy == 'deny' and current_variant.inventory_management -%}
            {%- if current_variant.inventory_quantity > 0 and current_variant.inventory_quantity <= max_inventory -%}
              {%- assign show_remaining_class = 'variant__countdown--show' -%}
              {%- assign current_inventory = current_variant.inventory_quantity -%}
            {%- endif -%}
          {%- endif -%}

          {% capture inventory %}
            <span data-remaining-max="{{ max_inventory }}" data-remaining-count>{{ current_inventory | default: 0 }} </span>
          {% endcapture %}

          <script data-product-remaining-json type="application/json">
            {
              {%- for variant in product.variants -%}
                {%- assign maximum = 11 -%}
                {%- assign quant = maximum | plus: 10 -%}
                {%- if variant.inventory_policy == 'deny' and variant.inventory_management -%}
                  {%- assign quant = variant.inventory_quantity | at_most: maximum -%}
                {%- endif -%}
                "{{ variant.id | json }}": "{{ quant | json }}"{%- unless forloop.last -%},{%- endunless -%}
              {%- endfor -%}
            }
          </script>

        {%- endif -%}

      </div>
    {%- endif -%}

  {% endform %}
  {% form 'product', product.metafields.custom.gc_color_ref.value , data-product-form: '', data-product-handle: all_products['grinder-card-color'].handle, class:'regular_form color-form'%}
  <input type="hidden" name="id" class="color_id_holder" value="{all_products['grinder-card-color'].variants[0].id}">
  {% for option in all_products['grinder-card-color'].options_with_values %}
    <fieldset class="select__fieldset">
      {% capture input_id %}{{product.id}}-option-{{ option.position }}{% endcapture %}
    <label for="{{ input_id }}">Color</label>
      <select class="product_option_1 change_price_func"
        id="{{ input_id }}" 
        name="options[{{ option.name | escape_once }}]"
        data-select-price>
        {% for variant in all_products['grinder-card-color'].variants %}
          <option class="option_1_opt"
            value="{{ variant.id }}"
            data-option-price="{{ variant.price }}"
            {% if option.selected_value == variant %} selected="selected"{% endif %}>
            {{ variant.title | escape_once }} ( + {{ variant.price | money}} each )
          </option>
        {% endfor %}
      </select>
    </fieldset>
   {% endfor %}
  <input type="hidden" class="card_color_quant" name="quantity" data-quantity-input aria-label="Quantity" value="1000"/>  
 {% endform %}

  {% form 'product', product.metafields.custom.gc_color_ref.value , data-product-form: '', data-product-handle: all_products['brushed-ep-finish'].handle, class:'regular_form gc-EP-form'%}
    <input type="hidden" name="id" class="gc_EP_id_holder" value="{{  all_products['brushed-ep-finish'].variants[0].id }}">
    <fieldset class="gc_EP_fieldset">
      <input class="gc_EP_input change_price_func" type="checkbox" name="check"> Add Brushed EP Finish ( + {{ all_products['brushed-ep-finish'].price | money }} each )<br>
    </fieldset>
  <input type="hidden" class="card_EP_quant" name="quantity" data-quantity-input aria-label="Quantity" value="1000"/>  
 {% endform %}
  
 {% form 'product', product.metafields.custom.gc_color_ref.value , data-product-form: '', data-product-handle: all_products['grinder-card-protective-sleeves'].handle, class:'regular_form gc-sleeve-form'%}
  <input type="hidden" name="id" class="gc_sleeve_id_holder" value="{{  all_products['grinder-card-protective-sleeves'].variants[0].id }}">
    <fieldset class="gc_sleeve_fieldset">
      <input class="gc_sleeve_input change_price_func" type="checkbox" name="check"> Add Protective Sleeves ( + {{ all_products['grinder-card-protective-sleeves'].price | money }} each )<br>
    </fieldset>
  <input type="hidden" class="card_sleeve_quant" name="quantity" data-quantity-input aria-label="Quantity" value="1000"/>  
 {% endform %}

  <form>
    <fieldset class="gc_membership_fieldset" style="border: 1px solid gray; padding: 1%; margin-bottom: 4%";>
      <legend>Membership Options</legend>
      <input class="gc_serial_input change_price_func" type="checkbox" name="check" value="{{ all_products['serial-numbers'].variants[0].id }}"> Add Serial Numbers ( + {{ all_products['serial-numbers'].price | money }} each )<br>
      <input class="gc_names_input change_price_func" type="checkbox" name="check" value="{{ all_products['individual-names'].variants[0].id }}"> Add Individual Names ( + {{ all_products['individual-names'].price | money }} each )<br>
      <input class="gc_strips_input change_price_func" type="checkbox" name="check" value="{{ all_products['magnetic-strips'].variants[0].id }}"> Add Magnetic Strips ( + {{ all_products['magnetic-strips'].price | money }} each )<br>
    </fieldset>
  </form>

  
    <div class="product__submit">
      <div data-product-add-popdown-wrapper class="product-add-popdown"></div>
      {% assign button_text = 'products.product.add_to_cart' | t %}
      {% if product.tags contains '_preorder' %}
        {% assign button_text =  'products.product.pre_order' | t %}
      {% endif %}
      {% unless current_variant.available %}
        {% assign button_text =  'products.product.sold_out' | t %}
      {% endunless %}


      <div class="product__submit__buttons">
        <button
          name="add"
          class="btn--outline btn--full btn--primary uppercase btn--add-to-cart btn--custom-gc"

          {% unless current_variant.available %}disabled="disabled"{% endunless %}>
          <span data-add-to-cart-text>
            {{ button_text }}
          </span>
          <span>•</span>
          <span id="dynamic_price_span" data-button-price>{{ current_variant.price | times: product.metafields.custom.plquant1  | money }}</span>
        </button>

        {% if buybutton_setting %}
          <div class="product__submit__quick">
            {{ form | payment_button }}
          </div> 
        {% endif %}

      </div>
    </div>

</div>

<script>




$(document).on("change",".change_price_func", function(){
     
    const price_text = $("#dynamic_price_span");
    const per_unit_p = $("#ppu_span");
    const qi_input_val = parseInt($(".custom__qi").val());  
    const option1Id = parseInt($(".product_option_1").find(":selected").attr("value"));
    const option1 = parseInt($(".product_option_1").find(":selected").attr("data-option-price"));
    const sleeveVal = $(".gc_sleeve_input").is(":checked");
    const sleevePrice = sleeveVal ? parseInt({{all_products['grinder-card-protective-sleeves'].price}}) : parseInt(0);
    const EPVal = $(".gc_EP_input").is(":checked");
    const EPPrice = EPVal ? parseInt({{all_products['brushed-ep-finish'].price}}) : parseInt(0);
    const serialVal = $(".gc_serial_input").is(":checked");
    const serialPrice = serialVal ? parseInt({{all_products['serial-numbers'].price}}) : parseInt(0);
    const namesVal = $(".gc_names_input").is(":checked");
    const namesPrice = namesVal ? parseInt({{all_products['individual-names'].price}}) : parseInt(0);
    const stripsVal = $(".gc_strips_input").is(":checked");
    const stripsPrice = stripsVal ? parseInt({{all_products['magnetic-strips'].price}}) : parseInt(0);
  
    // const changeSelect = $(".product_option_1").data("select-price", selected1);
    // const opti = parseInt($(".product_option_1").attr("data-select-price").val())
    

    function priceBreak(floor, ceiling, price){
       if (qi_input_val >= floor && qi_input_val < ceiling){
         console.log('floor', floor)
         console.log('ceiling', ceiling)
         console.log('price', price)
         console.log("option", option1)
      let tot_price = qi_input_val * (price + option1 + sleevePrice + EPPrice + serialPrice + namesPrice + stripsPrice) ;
      per_unit_p.html(Shopify.formatMoney(price, theme.strings.moneyFormat ));
      price_text.html(Shopify.formatMoney(tot_price, theme.strings.moneyFormat ));
      };
    };
    function highestQuant(floor, price){
      if (qi_input_val >= floor) {
         console.log('input', qi_input_val)        
         console.log('floor', floor)
         console.log('price', price)
        let tot_price = qi_input_val * (price + option1 + sleevePrice + EPPrice + serialPrice + namesPrice + stripsPrice);
        per_unit_p.html(Shopify.formatMoney(price, theme.strings.moneyFormat ));
        price_text.html(Shopify.formatMoney(tot_price, theme.strings.moneyFormat ));
      };
    };

     console.log(qi_input_val)

    let ptc1 = parseInt('{{ product.metafields.custom.plprice1 }}');
    let qtc1 = parseInt('{{ product.metafields.custom.plquant1 }}');
    let ptc2 = parseInt('{{ product.metafields.custom.plprice2 }}');
    let qtc2 = parseInt('{{ product.metafields.custom.plquant2 }}');
    let ptc3 = parseInt('{{ product.metafields.custom.plprice3 }}');
    let qtc3 = parseInt('{{ product.metafields.custom.plquant3 }}');

    let ptc4 = parseInt('{{ product.metafields.custom.plprice4 }}');
    let qtc4 = parseInt('{{ product.metafields.custom.plquant4 }}');
    let ptc5 = parseInt('{{ product.metafields.custom.plprice5 }}');
    let qtc5 = parseInt('{{ product.metafields.custom.plquant5 }}');

     console.log("sleeve", $(".gc_sleeve_id_holder").val())
       priceBreak(qtc1, qtc2, ptc1);
       priceBreak(qtc2, qtc3, ptc2);
       priceBreak(qtc3, qtc4, ptc3);
       highestQuant(qtc4, ptc4)
      $(".card_color_quant").val(qi_input_val) 
      $(".color_sleeve_quant").val(qi_input_val) 
      $(".color_id_holder").val(option1Id) 
  })

</script>








